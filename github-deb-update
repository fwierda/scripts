#!/usr/bin/env bash
set -eo pipefail

check_inputs() {
    if [[ -z "$1" ]]; then
        echo "Usage: $0 <package-name>"
        exit 1
    fi
}

check_dependencies() {
    if ! command -v jq &> /dev/null; then
        echo "Error: jq is not installed. Please install jq and try again."
        exit 1
    fi

    if ! command -v curl &> /dev/null; then
        echo "Error: curl is not installed. Please install curl and try again."
        exit 1
    fi
}

check_installed_version() {
    if ! dpkg -s $PACKAGE &> /dev/null; then
        echo "0.0.0"
        return
    fi

    dpkg -s $PACKAGE 2>/dev/null | grep -e "^Version:" | cut -d : -f2 | tr -d "[:space:]"
}

fetch_latest_release() {
    curl -s -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "https://api.github.com/repos/$REPO/releases?per_page=1"
}

main() {
    check_inputs "$@"
    check_dependencies

    case "$1" in
        k9s)
            PACKAGE="k9s"
            REPO="derailed/k9s"
            echo "Updating K9S..."
            ;;
        tabby)
            PACKAGE="tabby-terminal"
            REPO="Eugeny/tabby"
            echo "Updating Tabby..."
            ;;
        *)
            echo "Error: Unsupported package '$1'."
            exit 1
            ;;
    esac


    echo "Checking for new ${PACKAGE} version"
    INSTALLED=$(check_installed_version)

    RELEASES=$(fetch_latest_release)
    if [[ -z "$RELEASES" ]]; then
        echo "Error: Failed to fetch releases from GitHub."
        exit 2
    fi

    AVAILABLE=$(echo "$RELEASES" | jq -r ".[0].name" | tr -d "v")
    if [[ "$INSTALLED" == "$AVAILABLE" ]]; then
        echo "Latest version already installed. All done."
        exit 0
    fi

    LOWEST=$(echo -e "$INSTALLED\n$AVAILABLE" | sort -V | head -n 1)
    if [[ "$LOWEST" == "$AVAILABLE" ]]; then
        echo "Installed version is higher than latest. Exiting."
        exit 255
    fi

    URI=$(echo "$RELEASES" | jq -r ".[0].assets | \
        map(select(.name | test(\".?(_amd|-x)64.deb\"))) \
        | .[0].browser_download_url")

    echo "Found new release $AVAILABLE"
    TEMP_DEB=$(mktemp --suffix=.deb)
    trap 'rm -f "$TEMP_DEB"' EXIT

    curl -sLo "$TEMP_DEB" "$URI"
    sudo dpkg -i "$TEMP_DEB"
    echo "Update complete!"
}

main "$@"
